<!DOCTYPE html>
<!--
 Copyright 2020 Google LLC
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<html>
<head>
    <meta charset="utf-8" />
    <title>RecordRTC over SockJS</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
    <script src="https://www.WebRTC-Experiment.com/RecordRTC.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>

<body>
<div style="margin: 20px">
    <h1 style="font-size: 18px;">Dialogflow Speech Detection through streaming</h1>
    <div>
        <button id="start-recording" disabled>Start Streaming</button>
        <button id="stop-recording" disabled>Stop Streaming</button>
    </div>

    <h2 style="font-size: 16px; margin-bottom: 10px;">Sliced Audio</h2>
    <div id="slicedAudioSection"></div>

    <h2 style="font-size: 16px; margin-bottom: 10px;">Sliced Audio</h2>
    <div id="fullAudioSection"></div>

    <h2 style="font-size: 16px; margin-bottom: 10px;">Query Text</h2>
    <code>data.queryResult.queryText</code><br/>
    <input id="queryText" type="text" style="width: 400px;"/>

    <h2 style="font-size: 16px; margin-bottom: 10px;">Intent</h2>
    <code>data.queryResult.intent.displayName</code><br/>
    <input id="intent" type="text" style="width: 400px;"/>

    <h2 style="font-size: 16px;">Responses</h2>
    <code>data.queryResult.fulfillmentText</code><br/>
    <textarea id="results" style="width: 800px; height: 300px;"></textarea>
</div>
<script type="text/javascript">
    $(function(){
        let socket;

        const startRecording = document.getElementById('start-recording');
        const stopRecording = document.getElementById('stop-recording');
		startRecording.disabled = false;

        let recordAudio;

        startRecording.onclick = function() {
			startRecording.disabled = true;

            socket = new WebSocket('ws://localhost:8080/streamingDetect/websocket');

			socket.onopen = () => {
			    console.log('Socket Connection is Opened');
			};

			socket.onclose = () => {
			    console.log('Socket Connection is Closed');
			};

			socket.onmessage = (messageEvent) => {
			    const jsonData = JSON.parse(messageEvent.data);

			    if(typeof jsonData !== 'object'){
			        console.log(jsonData);
			        return;
			    }

                if(jsonData.queryResult){
                    const resultpreview = document.getElementById('results');
                    const intentInput = document.getElementById('intent');
                    const textInput = document.getElementById('queryText');

                    resultpreview.innerHTML += "" + jsonData.queryResult.fulfillmentText;
                    intentInput.value = jsonData.queryResult.intent.displayName;
                    textInput.value = "" + jsonData.queryResult.queryText;
                }
			};

            navigator.getUserMedia(
				{
					audio: true
				},
				function(stream) {
					recordAudio = RecordRTC(stream, {
						type: 'audio',
						mimeType: 'audio/webm',
						sampleRate: 44100,
						desiredSampRate: 16000,

						recorderType: StereoAudioRecorder,
						numberOfAudioChannels: 1,

						//1)
						// get intervals based blobs
						// value in milliseconds
						// as you might not want to make detect calls every seconds
						timeSlice: 2000,

						//2)
						// as soon as the stream is available
						ondataavailable: function(blob) {
							document.getElementById('slicedAudioSection').append(getAudioBlob(blob));

							let fileReader = new FileReader();
							fileReader.readAsArrayBuffer(blob);
							fileReader.onload = function(event) {
								let arrayBuffer = fileReader.result;
								let arr = new Int16Array(arrayBuffer);

                                console.log('Send Data : ' + arr.length + ' Bytes');
								socket.send(arr);
							};
						}
					});

					recordAudio.startRecording();
					stopRecording.disabled = false;
				},
				function(error) {
					console.error(error);
				});
		};

		function getAudioBlob(blob){
			let audio = document.createElement('audio');
			audio.controls = true;
			audio.src = window.URL.createObjectURL(blob);

			let container = document.createElement('div');
			container.append(audio);

			return container;
		}

        // 4)
        // on stop button handler
        stopRecording.onclick = function() {
			// recording stopped
			recordAudio.stopRecording(stopRecordingCallback);

            startRecording.disabled = false;
			stopRecording.disabled = true;

			sendEof();
		};

		function stopRecordingCallback(){
			document.getElementById('fullAudioSection').append(getAudioBlob(recordAudio.getBlob()));
		}

		function sendEof(){
		    const eofString = 'eof';
		    const arrBuf = new ArrayBuffer(eofString.length);
		    const arr = new Int8Array(arrBuf);

		    for(let i = 0 ; i < eofString.length ; i++){
		        arr[i] = eofString.charCodeAt(i);
		    }

	        socket.send(arr);
        }
    });
</script>
</body>
</html>